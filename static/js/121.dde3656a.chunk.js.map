{"version":3,"file":"static/js/121.dde3656a.chunk.js","mappings":"6ZAAO,IAAMA,EAAO,sCACPC,EAAU,mCACVC,EAAU,sCACVC,EAAa,2BAAuBF,EAAvB,mBACbG,EAAW,mBAAeH,EAAf,mBACXI,EAAY,4DAAwDJ,EAAxD,qDACZK,EAAgB,2BAAuBL,EAAvB,0BAChBM,EAAW,kEAA8DN,E,oICFzEO,EAAY,SAACC,GACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAejB,IAbAC,EAAAA,EAAAA,YAAU,WACN,IACIC,EAAAA,EAAAA,IAAA,UAAab,EAAAA,cAAb,OAA4BI,IAAeU,MAAK,SAAAC,GAC5CR,EAAUQ,EAAIC,KAAKC,QACnBR,EAAU,UACb,GAIA,CAHH,SACMS,QAAQC,IAAI,SACZV,EAAU,QACb,CACJ,GAEH,CAACL,IACY,YAAXI,EACA,OAAyB,IAAlBF,EAAOc,QACV,qDAEI,wBACKd,EAAOe,KAAI,SAAAC,GAAK,OACb,yBACI,SAAC,EAAAC,KAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAMC,MAAO,CAAEC,KAAMjB,GAAxC,SACKY,EAAMM,SAFNN,EAAMG,GADF,KAUpC,EClCYI,EAAS,WAClB,OAAsCxB,EAAAA,EAAAA,UAAS,IAA/C,eAAOyB,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAaG,IAAI,SAEnCxB,EAAAA,EAAAA,YAAU,WACY,KAAduB,GAEJJ,EAAeI,EAElB,GAAE,IAQH,OACI,iCACI,kBAAME,SANG,SAAAC,GACbA,EAAEC,iBACFR,EAAeI,EAClB,EAGO,WACI,mBAAQK,KAAK,SAAb,2BACA,kBAAOA,KAAK,OAAOC,MAAON,EAAWO,SAXjC,SAAAJ,GACZJ,EAAgB,CAAES,KAAML,EAAEM,OAAOH,OACpC,QAWO,SAAC,EAAAI,SAAD,CAAUC,UAAU,2CAApB,SACKhB,GAAe,SAAC3B,EAAD,CAAWC,YAAa0B,IAAkB,SAKzE,C","sources":["components/url.jsx","components/MovieItem.jsx","pages/Movies.jsx"],"sourcesContent":["export const baseUrl = `https://api.themoviedb.org/3/movie/`;\nexport const API_KEY = '6380ba142025380893178538a290f18b';\nexport const baseImgURL = `https://image.tmdb.org/t/p/original`;\nexport const onURLFromCast = `/credits?api_key=${API_KEY}&language=en-US`;\nexport const onMovieSpec = `?api_key=${API_KEY}&language=en-US`;\nexport const onMovieItems = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=`;\nexport const onURLfromReviews = `/reviews?api_key=${API_KEY}&language=en-US&page=1`;\nexport const onTrendings = `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`;","import axios from \"axios\"\nimport { onMovieItems } from \"components/url\"\nimport { useEffect, useState } from \"react\"\nimport { Link, useLocation } from \"react-router-dom\"\n\nexport const MovieItem = (searchQuery) => { \n    const [movies, setMovies] = useState([])\n    const [status, setStatus] = useState('idle')\n    const location = useLocation()\n\n    useEffect(() => {\n        try {\n            axios.get(`${onMovieItems}${searchQuery}`).then(res => {\n                setMovies(res.data.result)\n                setStatus('pending')\n            })\n        } catch {\n                console.log('error')\n                setStatus('error')\n            }\n        }   \n\n    , [searchQuery])\n    if (status === 'pending') { \n        return movies.length === 0 ? (\n            <p>Sorry ........ no Movies</p>\n        ) : (\n                <ul>\n                    {movies.map(movie => \n                        <li key={movie.id}>\n                            <Link to={`${movie.id}`} state={{ from: location }}>\n                                {movie.title}\n                            </Link>\n                        </li>\n                    )}\n                </ul>\n        )\n    }\n}","import { MovieItem } from \"components/MovieItem\"\nimport { Suspense, useEffect, useState } from \"react\"\nimport { useSearchParams } from \"react-router-dom\"\n\nexport const Movies = () => {\n    const [searchMovie, setSearchMovie] = useState('')\n    const [searchParams, setsearchParams] = useSearchParams()\n    const movieName = searchParams.get('name')\n    \n    useEffect(() => {\n        if (movieName === '') \n            return\n        setSearchMovie(movieName)   \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    const setMovie= e =>{ \n        setsearchParams({ name: e.target.value})\n    }\n    const onSubmit = e => { \n        e.preventDefalut()\n        setSearchMovie(movieName)\n    }\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <button type=\"submit\">Search movie</button>\n                <input type=\"text\" value={movieName} onChange={setMovie} />\n            </form>\n            <Suspense fallback={<div>Loading......</div>}>\n                {searchMovie ? (<MovieItem searchQuery={searchMovie}/>) : null }\n            </Suspense>\n        </>\n    )\n    \n}\n\n"],"names":["baseUrl","API_KEY","baseImgURL","onURLFromCast","onMovieSpec","onMovieItems","onURLfromReviews","onTrendings","MovieItem","searchQuery","useState","movies","setMovies","status","setStatus","location","useLocation","useEffect","axios","then","res","data","result","console","log","length","map","movie","Link","to","id","state","from","title","Movies","searchMovie","setSearchMovie","useSearchParams","searchParams","setsearchParams","movieName","get","onSubmit","e","preventDefalut","type","value","onChange","name","target","Suspense","fallback"],"sourceRoot":""}